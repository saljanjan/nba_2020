# -*- coding: utf-8 -*-
"""nba_2020.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g3ITUAIz38Ls8QQCGETe2B_CRWg-jqUj

#using google jupyter notebook on colab for the analysis
"""

import pandas as pd
from pandas import Series, DataFrame
import plotly.express as px

#nba_20 = pd.read_excel('/content/2019-2020 NBA Player Stats  NBAstuffer.xlsx')
nba_20_copy=pd.read_excel('/content/drive/MyDrive/2019-2020 NBA Player Stats  NBAstuffer.xlsx')
#nba_20 = pd.read_excel('/2019-2020 NBA Player Stats  NBAstuffer.xlsx')
nba_20_copy.head(3)

nba_20_copy.tail(3)

nba_20_copy.MPG.min()

nba_20_copy[nba_20_copy.MPG == 0.2]

px.histogram(nba_20_copy, x = 'AGE', y = 'MPG',facet_col='TEAM', color='POS')

"""#Bar graph Minutes per game Vs. Age"""

px.bar(nba_20_copy, y = 'AGE', x = 'MPG', color='POS', title='Minutes Vs. Age')

px.scatter(nba_20_copy, y = 'AGE', x = 'MPG', color='POS', title='Minutes Vs. Age', template='plotly_dark')

"""#

#Analysis by Position-Age-Minutes
"""

pd.pivot_table(nba_20_copy, index=['POS', 'AGE'], values='MPG', aggfunc='count')

"""#Maximum minutes per game"""

nba_20_copy.MPG.max()

"""#How many players played the whole game"""

#nba_20_copy[nba_20_copy.MPG == nba_20_copy.MPG.max()]
nba_20_copy.loc[nba_20_copy.MPG == 40.6]

"""#Age distribution"""

#px.histogram(nba_20_copy,)
fig = px.histogram(nba_20_copy, x="AGE", title='Age Histogram', template='seaborn')
fig.show()

fig = px.histogram(nba_20_copy, x="AGE", histnorm='probability density', title='Age Density', template='presentation')
fig.show()

fig = px.histogram(nba_20_copy, x="AGE", histnorm='probability density', title='Age/Position Density', template='plotly_dark', color = 'POS')
fig.show()

fig = px.scatter(nba_20_copy, x = '2PA', y='3PA', color='TEAM', title='2-Pts Vs. 3Pts By a Team', template='plotly_dark')
fig.show()

"""#Top 3 players in (2 points)"""

nba_20_copy.nlargest(3, '2PA')

"""#top 3 players for 3 points"""

nba_20_copy.nlargest(3, '3PA')

"""#histogram for 2-pts vs. 3-pts by a team"""

fig = px.bar(nba_20_copy, x = '2PA', y='3PA', color='TEAM', title='2-Pts Vs. 3Pts By a Team', template='plotly_white')
fig.show()

"""#2-pts vs. 3-pts as percent --> use crosstab"""

print(nba_20_copy.groupby('TEAM')[['2PA', '3PA','GP']].count())

"""#Game per min. Vs. 2PA"""

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
sns.set_style('darkgrid')
plt.figure(figsize=(21,7))
pts = nba_20_copy.pivot_table("3PA", "2PA", "GP")
plt.xlabel('Game Played', size = 16, color='b')
plt.ylabel('2_Points', size = 16, color='b')
plt.title('Heat Map', size = 21, color='b')

ax = sns.heatmap(pts)

"""## RELATION BETWEEN AGE AND MINUTE/GAME  """

px.histogram(nba_20_copy, x = 'AGE', y = 'MPG', color= 'TEAM', title='Age Vs. Minutes')

px.scatter(nba_20_copy, x = 'two_pa', y = 'AGE', color='TEAM', title='2Pt Vs. Age', template='plotly_white')

import plotly.figure_factory as ff

"""##Age density plot + Histogram"""

x = nba_20_copy.AGE
hist_data = [x]
group_labels = ['nba_20_copy']

fig = ff.create_distplot(hist_data, group_labels)
fig.show()

"""##pass/Game played density plot """

x = nba_20_copy.GP
hist_data = [x]
group_labels = ['nba_20_copy'] # dataframe

fig = ff.create_distplot(hist_data, group_labels)
#fig.show()

fig.update_layout(title_text='Passes/Game Distribution')
fig.show()

"""#Two point by the team (histogram)"""

px.histogram(nba_20_copy, x = 'TEAM', y = '2PA', color='TEAM', title='Two Points by a Team', template='plotly_white')

fig = px.bar(nba_20_copy, x="TEAM", y="2PA", color='3PA', title='2Points Vs. 3Poins By a Team')
fig.show()

nba_20_copy.groupby('FULL_NAME')['2PA'].value_counts()

nba_20_copy.groupby('FULL_NAME')[['2PA', '3PA']].sum()

"""## Need to rename several columns for analysis"""

pd.pivot_table(nba_20_copy, index = ['TEAM', 'FULL_NAME'],  values=['2PA', '3PA'], aggfunc=['sum'])

pd.pivot_table(nba_20_copy, index = ['TEAM', 'FULL_NAME'],  values=['2PA', '3PA'], aggfunc=['count', 'max'])

"""#sorted 2pt and 3pt by a player (descending)"""

nba_20_copy.sort_values(by=['two_pa', 'three_pa'], ascending=False).head(5)

nba_20_copy['2PA'].max()

#nba_20_copy.loc[nba_20_copy.2PA== 299] #not working bc of 3PA. change the column name

"""#You must install upgrade plotly and restart the kernal"""

!pip install --upgrade plotly

import plotly.express as px

fig = px.sunburst(nba_20_copy, path=['TEAM', 'FULL_NAME', '2PA', '3PA'], values='3PA')
fig.show()

"""#pie chart for 2pts by a team"""

fig = px.pie(nba_20_copy, values='two_pa', names='TEAM',title='2 Points Percent',template='plotly_dark' )
fig.show()

"""#pie chart 3pts by a team"""

fig = px.pie(nba_20_copy, values='three_pa', names='TEAM',title='3 Points Percent',template='plotly_dark' )
fig.show()

"""#Dounut chart for Two points percent for each team"""

import plotly.graph_objects as go

labels = nba_20_copy.TEAM
values = nba_20_copy.two_pa

# Use `hole` to create a donut-like pie chart
fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.2)])
fig.show()

"""#3pts pie chart"""

import plotly.graph_objects as go

labels = nba_20_copy.TEAM
values = nba_20_copy.three_pa

# Use `hole` to create a donut-like pie chart
fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])
fig.show()

"""#two donut charts side by side comparing 2pts va. 3pts """

import plotly.graph_objects as go
from plotly.subplots import make_subplots

labels = nba_20_copy.TEAM

# Create subplots: use 'domain' type for Pie subplot
fig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])
fig.add_trace(go.Pie(labels=labels, values=nba_20_copy.two_pa, name="Two Points"),
1,1)
fig.add_trace(go.Pie(labels=labels, values=nba_20_copy.three_pa, name="Three Points"),
              1, 2)
# Use `hole` to create a donut-like pie chart
fig.update_traces(hole=.4, hoverinfo="label+percent+name")

fig.update_layout(
    title_text="2-Pts Vs. 3-Pts",
    # Add annotations in the center of the donut pies.
    annotations=[dict(text='2_Pts', x=0.18, y=0.5, font_size=20, showarrow=False),
                 dict(text='3_Pts', x=0.82, y=0.5, font_size=20, showarrow=False)])
fig.show()

"""#Stacked bar chart, Comparing 2pts. Vs. 3pts."""

fig = px.bar(nba_20_copy, x="TEAM", y=[nba_20_copy.two_pa, nba_20_copy.three_pa], title="2Pts. Vs. 3Pts.")
fig.show()



"""#Total points by Two_pts"""

#Total points by Two_pts
pd.pivot_table(nba_20_copy, index='TEAM', values=['two_pa', 'three_pa'], aggfunc='sum', margins=True)

"""#Bar chart for the Sum of Two_pts by each Team  """

px.histogram(nba_20_copy, x = 'TEAM', y='two_pa', color="TEAM", title = 'Sum of Two points', template='plotly_white')

px.histogram(nba_20_copy, x = 'TEAM', y='three_pa', color="TEAM", title = 'Sum of Three points', template='plotly_white')

"""#Group comparision, 2pts vs.3pts side by side bar graph"""

import plotly.graph_objects as go


fig = go.Figure(data=[
    go.Bar(name='Pts_2', x=nba_20_copy.TEAM, y=nba_20_copy.two_pa),
    go.Bar(name='Pts_3', x=nba_20_copy.TEAM, y=nba_20_copy.three_pa)
])
# Change the bar mode
fig.update_layout(barmode='group')
fig.show()

"""#Analyze data by a team (subset)

#dataframe for lakers
"""

df_lal = nba_20_copy.loc[nba_20_copy.TEAM == 'Lal']
df_lal.sample(11)

"""#renaming columns"""

nba_20_copy  =nba_20_copy.rename(columns={"2PA": "two_pa", "3PA": "three_pa"})
nba_20_copy.columns

"""#Sum of two/three pts by a player"""

px.histogram(df_lal, x = 'three_pa' , y='two_pa', color = 'FULL_NAME', title='Lakers_2_3_points_Sum', template='plotly_dark')

"""#Heatmap 2/3 pts by a player"""

fig = px.bar(df_lal, x="FULL_NAME", y="two_pa", color='three_pa', title='2Points Vs. 3Poins By a PLAYER', template='plotly_white')
fig.show()

"""#heatmap 2 Vs. 3 pts by a player """

fig = px.bar(df_lal, x="FULL_NAME", y="three_pa", color='two_pa', title='2Points Vs. 3Poins By a PLAYER', template='plotly_dark')
fig.show()

"""#Scatter plot 2 Vs. 3 by a player"""

px.scatter(df_lal, x = 'two_pa', y = 'three_pa', color = 'FULL_NAME', title  = '2 Vs. 3 Pts', template = 'seaborn')

"""#box plot for 2 pts for Lakers"""

fig = px.box(df_lal, y="two_pa", title='Box plot for 2Pts', template='plotly_white')
fig.show()

"""#Box plot for 3Pts. (on y-axis)"""

fig = px.box(df_lal, y="three_pa", title='Box plot for 3Pts', template='plotly_dark')
fig.show()

"""#box plot on x-axis"""

fig = px.box(df_lal, x="three_pa", title='Box plot for 3Pts', template='plotly_dark')
fig.show()

